leetcode
53. Maximum Subarray

어떻게 풀어야 할 지 감을 못 잡아서.. 풀이 참고 했다가 Kadane’s Algorithm 에 대해 알게 됨

Brute Force : O(N*N) 
: 가능한 모든 부분 배열의 합을 구하고 이에 대한 최대값을 구함 

Kadene's Algorithm : O(N)
*핵심* local_maximum[i] = max(A[i], A[i] + local_maximum[i-1])

Kadane’s Algorithm 은 다이나믹 프로그래밍을 적용한 방식. 

Dynamic Programming
: 큰 문제를 작은 문제로 쪼개어 해결하고, 한 번 풀었던 문제는 어딘가에 저장해두어 반복하여 풀지 않는 것



class Solution(object):
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        current_max, max_till_now = 0, float('-inf')

        for num in nums:
            current_max = max(num, num + current_max)
            max_till_now = max(max_till_now, current_max)
        
        return max_till_now


** inf : 어떤 수와 비교해도 무조건 크다고 판정 -> 최소값을 저장해야 하는 변수에 아주 큰 값을 할당해야 하는 경우
  -inf : 어떤 수와 비교해도 무조건 작다고 판정 -> 최대값을 저장해야 하는 변수에 아주 작은 값을 할당해야 하는 경우
