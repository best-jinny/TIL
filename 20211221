public class IntQueue {
    private int max; // 큐의 최대 용량
    private int front; // 인큐하는 데이터 가운데 첫번째 요소의 인덱스를 저장
    private int rear; // 인큐한 데이터 가운데 맨 나중에 넣은 요소의 하나 뒤의 인덱스를 저장. 다음 인큐 시에 데이터가 저장될 요소의 인덱스를 미리 준비해 둔다
    private int num; // 현재 데이터 수 : front와 rear 값이 같은 경우 큐가 비어있는지 가득찼는지 구별할 수 없는 상황을 피하기 위해 필요. 큐가 비었을때 num = 0, 가득 차면 num=max 
    private int[] que; // 인큐하는 데이터를 저장하기 위한 큐 본체용 배열
    
    public class EmptyIntQueueException extends RuntimeException {
        public EmptyIntQueueException(){}
    }
    
    public class OverflowIntQueueException extends RuntimeException {
        public OverflowIntQueueException(){}
    }
    
    public IntQueue(int capacity) {
        num = front = rear = 0;
        max = capacity;
        try {
            que = new int[max];
        } catch (OutOfMemoryError e) {
            max = 0;
        }
    }
    
    public int enque(int x) throws OverflowIntQueueException {
        if(num >= max)
            throw new OverflowIntQueueException();
        que[rear++] = x;
        num++;
        if(rear == max)
            rear = 0;
        return x;
    }
    
    public int deque() throws EmptyIntQueueException {
        if(num <= 0) 
            throw new EmptyIntQueueException();
        int x = que[front++];
        num--;
        if(front == max)
            front = 0;
        return x;
    }
    
    public int peek() throws EmptyIntQueueException {
        if(num <= 0)
            throw new EmptyIntQueueException();
        return que[front];
    }
    
    public int indexOf(int x) {
        for(int i = 0; i < num; i++) {
            int idx = (i + front) % max;
            if(que[idx] == x)
                return idx;
        }
        return -1;
    }
    
    public void clear() {
        num = front = rear = 0;
    }
    
    public int capacity() {
        return max;
    }
    
    public int size() {
        return num;
    }
    
    public boolean isEmpty() {
        return num <= 0;
    }
    
    public boolean isFull() {
        return num >= max;
    }
    
    public void dump() {
        if (num <= 0)
            System.out.println("큐가 비었습니다");
        else {
            for (int i=0; i < num; i++)
                System.out.println(que[(i+front) % max] + " ");
            System.out.println();
        }
    }
    
}
