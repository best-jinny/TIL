* 프로세스와 스레드

프로그램 -> 프로세스 -> 스레드

프로그램 : 파일이 저장 장치에 저장되어 있지만 메모리에는 올라가있지 않은 정적인 상태
=> 코드 덩어리

프로세스 : 컴퓨터 메모리에 올라간 동적인 상태의 프로그램. 

스레드 : 프로세스와는 다르게 스레드간 메모리를 공유하며 작동. 
스레드끼리 프로세스의 자원을 공유하면서 프로세스 실행 흐름의 일부가 됨
=> 프로세스의 코드에 정의된 절차에 따라 실행되는 특정한 수행 경로


프로세스와 스레드의 작동 방식

프로세스는 메모리에 올라갈 때 운영체제로부터 시스템 자원을 할당 받음
이 때 운영체제는 프로세스마다 각각 독립된 메모리 영역을 Code/Data/Stack/Heap의 형식으로 할당해줌
각각의 독립된 메모리 영역을 할당해주기 때문에 프로세스는 다른 프로세스의 변수나 자료에 접근할 수 없음

스레드는 프로세스가 할당받은 메모리 영역 내에서 Stack 형식으로 할당된 메모리 영역은 따로 할당 받고,
나머지 Code/Data/Heap 형식으로 할당된 메모리 영역을 공유. 
따라서 각각의 스레드는 별도의 스택을 가지고 있지만 힙 메모리는 서로 읽고 쓸 수 있음

==>

프로세스를 실행하다가 오류가 발생해서 강제 종료된다면 공유파일을 손상시키는 경우가 아닌 이상 다른 프로세스에 영향 없음

스레드의 경우에는 Code/Data/Heap 메모리 영역을 공유하기 때문에 어떤 스레드 하나에서 오류가 발생한다면 같은 프로세스 내의 다른 스레드 모두가 강제 종료됨


멀티태스킹 : 하나의 운영체제 안에서 여러 프로세스가 실행되는 것
멀티스레드 : 하나의 프로세스가 여러 작업을 여러 스레드를 사용하여 동시에 처리하는 것
 - 장점   1. Context-Switching 시 공유하고 있는 메모리만큼 자원을 아낄 수 있다
          2. 프로세스 내의 stack 영역을 제외한 모든 메모리를 공유하기 때문에 통신의 부담이 적어 응답이 빠름

 - 단점  **여러 스레드가 함께 전역 번수를 사용할 경우 발생할 수 있는 동기화 문제

          => 스레드의 스케줄링은 운영체제가 처리하지 않기 때문에 프로그래머가 직접 동기화 문제에 대응할 수 있어야 함
