API URI 설계
* 가장 중요한 것은 리소스 식별!
- 리소스? 
ex) 미네랄을 캐라 -> '미네랄'이 리소스
ex) 회원을 등록/수정/삭제한다 -> '회원'이 리소스

-> 회원 리소스를 URI에 매핑

* 회원 목록 조회 /members
* 회원 조회 /members/{id}
* 회원 등록 /members/{id}
* 회원 수정 /members/{id}
* 회원 삭제 /members/{id}

** 리소스와 행위를 분리!
URI는 리소스만 식별,
리소스 : 회원
행위 : 조회, 등록, 삭제, 변경
리소스는 명사. 행위는 동사

HTTP 메서드 종류
* GET : 리소스 조회
* POST : 요청 데이터 처리, 주로 등록에 사용
* PUT : 리소스를 대체, 해당 리소스가 없으면 생성
* PATCH : 리소스 부분 변경
* DELETE : 리소스 삭제

POST 정리
1. 새 리소스 생성(등록)
 - 서버가 아직 식별하지 않은 새 리소스 생성

2. 요청 데이터 처리
 - 단순히 데이터를 생성하거나, 변경하는 것을 넘어서 프로세스를 처리해야 하는 경우
 ex ) 주문에서 결제 완료 -> 배달 시작 -> 배달 완료 처럼 단순히 값 변경을 넘어 프로세스 상태가 변경되는 경우
 - POST의 결과로 새로운 리소스가 생성되지 않을 수도 있음
 ex ) POST /orders/{orderId}/start-delivery (어쩔 수 없이 리소스만으로 URI 설계가 불가한 경우 -> 컨트롤 URI)

3. 다른 메서드로 처리하기 애매한 경우
 ex) JSON으로 조회 데이터를 넘겨야 하는데, GET 메서드를 사용하기 어려운 경우
 - 애매하면 POST

GET
1. 리소스 조회

PUT
1. 리소스를 대체
 - 리소스가 있으면 대체(리소스를 완전히 대체한다)
 - 리소스가 없으면 생성
 - 쉽게 이야기해서 덮어버림

2. **클라이언트가 리소스를 식별
 - 클라이언트가 리소스 위치를 알고 URI 지정 (PUT /members/100)
 - POST와 차이점(POST /members) 

PATCH 
1. 리소스 부분 변경
-> PATCH 지원 안된다면 POST 쓰면 됨

DELETE
1. 리소스 제거
