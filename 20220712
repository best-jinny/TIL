DFS 알고리즘
* 처음보는 노드 visited = 0 / 스택에 들어가있는 노드 visited = 1 / 이미 방문한 노드 visited = 2

(처음에 모든 노드를 방문하지 않았다고 표시 visited=0)
시작점 노드를 (visited=1) 표시 후, 스택에 넣는다

스택에 아무 노드도 없을 때까지:
  1. 스택에서 가장 위 노드를 꺼낸다
  2. 방문 처리 표시(visited=2) 한다.
  3. 이 노드에 인접해 있는 노드들을 돌면서:
      1. 방문하지 않은 노드면(visited=0):
          1. visited =1 표시한다
          2. 스택에 넣는다
          
          
from collections import deque
from subway_graph import *

def dfs(graph, start_node):
    """dfs 함수"""
    stack = deque()  # 빈 스택 생성

    # 모든 노드를 처음 보는 노드로 초기화
    for station_node in graph.values():
        station_node.visited = 0

    start_node.visited = 1
    stack.append(start_node)
    
    while stack:
        current_node = stack.pop()
        current_node.visited = 2
        for neighbor in current_node.adjacent_stations:
            if neighbor.visited == 0:
                neighbor.visited = 1
                stack.append(neighbor)
                
                
    


stations = create_station_graph("./new_stations.txt")  # stations.txt 파일로 그래프를 만든다

gangnam_station = stations["강남"]

# 강남역과 경로를 통해 연결된 모든 노드를 탐색
dfs(stations, gangnam_station)

# 강남역과 서울 지하철 역들 연결됐는지 확인
print(stations["강동구청"].visited)
print(stations["평촌"].visited)
print(stations["송도"].visited)
print(stations["개화산"].visited)

# 강남역과 대전 지하철 역들 연결됐는지 확인
print(stations["반석"].visited)
print(stations["지족"].visited)
print(stations["노은"].visited)
print(stations["(대전)신흥"].visited)


  
