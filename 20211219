[이진탐색 재귀로 구현]

def binary_search(element, some_list, start_index=0, end_index=None):
    # end_index가 따로 주어지지 않은 경우에는 리스트의 마지막 인덱스
    if end_index == None:
        end_index = len(some_list) - 1

    # 코드를 작성하세요.

print(binary_search(2, [2, 3, 5, 7, 11]))
print(binary_search(0, [2, 3, 5, 7, 11]))
print(binary_search(5, [2, 3, 5, 7, 11]))
print(binary_search(3, [2, 3, 5, 7, 11]))
print(binary_search(11, [2, 3, 5, 7, 11]))


1) recursive case와 base case ?

Recursive case: 현 문제가 너무 커서, 같은 형태의 더 작은 부분 문제를 재귀적으로 푸는 경우
Base case: 이미 문제가 충분히 작아서, 더 작은 부분 문제로 나누지 않고도 바로 답을 알 수 있는 경우

2) base case 먼저

파라미터 element, some_list, start_index, end_index가 어떤 특징을 가질 때 답을 바로 알 수 있는지?

이 문제의 경우 base case는 두 가지

1. some_list안에 element가 없다는 것을 확신할 수 있을 때. 이 때는 element를 some_list 안에서 찾지 못했다는 것을 알리기 위해서 None을 리턴

2. some_list에서 찾으려는 요소 element를 찾은 경우. 그럼 더 이상 탐색을 할 필요 없이 element의 인덱스를 리턴.


3) some_list 안에 element가 없다는 것은 어떻게 확신할 수 있는지?

start_index와 end_index의 값이 같으면, 탐색 범위의 크기는 1
만약 범위의 크기가 1일 때에도 some_list에서 element를 찾지 못한다면,
또 다시 탐색 범위를 줄이게 돼서 결국 start_index가 end_index 보다 커지게 됨. 



def binary_search(element, some_list, start_index=0, end_index=None):
    # end_index가 따로 주어지지 않은 경우에는 리스트의 마지막 인덱스
    if end_index == None:
        end_index = len(some_list) - 1

    # base case: start_index가 end_index보다 크면 some_list안에 element는 없다
    if start_index > end_index:
        return None
        
    # 범위의 중간 인덱스를 찾는다
    mid = (start_index + end_index) // 2
  
    # base case: 이 인덱스의 값이 찾는 값인지 확인을 해준다
    if some_list[mid] == element:
        return mid
        
    # 찾는 항목이 중간 값보다 작으면 리스트 왼쪽을 탐색해준다
    if element < some_list[mid]:
        return binary_search(element, some_list, start_index, mid - 1)

    # 찾는 항목이 중간 값보다 크면 리스트 오른쪽을 탐색해준다
    else:
        return binary_search(element, some_list, mid + 1, end_index)
