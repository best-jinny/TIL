Dynamic Programming의 조건
1) 최적 부분 구조(Optimal Substructure)
부분 문제들의 최적의 답을 이용해서 기존 문제의 최적의 답을 구할 수 있다는 것! -> 피보나치 수, 최단 경로 찾기

2) 중복되는 부분 문제(Overlapping Subproblems)
같은 것을 여러 번 계산하는 것 비효율 -> 재귀로 구현한 피보나치
부분 문제로 나눈다고 해서 항상 중복되는 부분 문제가 있는 것은 아님 -> 합병절렬(non-Overlapping Subproblems)

Dynamic Programming? 
한 번 계산한 결과를 재활용하는 방식

1) Memoization : 하향식 접근(Top-down) 재귀 기반 -> call stack.. ++ // 다시 쓸 값을 저장해둠(cache) 
2) Tabulation : 상향식 접근(Bottom-up) 반복문 // Table을 채워가는 식으로.. -> 필요 없는 계산까지 할 수 있음 


# 피보나치수열(Memoization)

def fib_memo(n, cache):
    # 코드를 작성하세요.
    # base case 
    if n < 3 :
        return 1 
    
    # 이미 n번째 피보나치를 계산했으면 : 
    # 저장된 값을 바로 리턴한다. 
    if n in cache:
        return cache[n]
        
    # 아직 n번째 피보나치 수를 계산하지 않았다면 :
    # 계산 한 후 cache 에 저장 
    cache[n] = fib_memo(n-1, cache) + fib_memo(n-2, cache)
    
    # 계산한 값을 리턴
    return cache[n]
    

def fib(n):
    # n번째 피보나치 수를 담는 사전
    fib_cache = {}

    return fib_memo(n, fib_cache)




# 피보나치수열(Tabulation)
def fib_tab(n):
    # 코드를 작성하세요.
    # 이미 계산된 피보나치 수를 담는 리스트
    fib_table = [0, 1, 1] 
    
    # n번째 피보나치 수까지 리스트를 하나씩 채우기
    for i in range(3, n+1):
        fib_table.append(fib_table[i-1] + fib_table[i-2])
    
    # 피보나치 n번째 수를 리턴한다
    return fib_table[n]


# Tabulation으로 피보나치 함수 
- 시간복잡도 : O(n)
- 공간복잡도 : O(n)

fib(20) 을 계산하기 위해서는 fib(18)+fib(19) 값만 있으면 됨
fib(1) 부터 모든 값을 저장할 필요 없음

가장 최근 값 2개를 저장하는 current, previous 두 변수 활용
-> 사용하는 메모리는 고정되어 있기 때문에 공간 복잡도 O(1)!! 


** Dynamic Programming 을 할 때, 모든 계산 값을 저장할 필요가 없다면 공간 사용을 최적화!


# 피보나치수열(공간최적화)

def fib_optimized(n):
    # 코드를 작성하세요. 
    current = 1 
    previous = 0 
    
    # 반복적으로 위 변수 업데이트 
    for i in range(1, n) :
        tmp = current 
        current = current + previous 
        previous = tmp
    
    # tmp 없이 한 줄에 작성하려면 ?! 
    # current, previous = current + previous, current
    
    
    # n번째 피보나치 수 리턴
    return current


